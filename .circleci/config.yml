# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
jobs:
  test:
    docker:
      - image: cimg/node:20.18.0 # Use a Node.js image for running tests
        user: root  # Use root user  
    steps:
      - checkout     
      # Install dependencies
      - run:
          name: Install dependencies
          command: npm run install-all
  
      - run:
          name: Create .env file
          command: |
            echo "ORACLE_USER=$ORACLE_USER" >> server/.env
            echo "ORACLE_PASSWORD=$ORACLE_PASSWORD" >> server/.env
            echo "ORACLE_CONNECT_STRING=$ORACLE_CONNECT_STRING" >> server/.env
            echo "JWT_SECRET=$JWT_SECRET" >> server/.env

      - run:
          name: Set up environment variables for frontend
          command: |
            echo "REACT_APP_BACKEND_URL=http://backend:3000" >> .env

      # Set up Docker environment
      - setup_remote_docker:
          docker_layer_caching: true
          setup_remote_docker:
            - image: cimg/python:3.8  # Optional: you can add any additional Docker images needed
            - environment:
                DOCKER_BUILDKIT: 1
                COMPOSE_DOCKER_CLI_EXPERIMENTAL: 1

      # Start Docker Compose services
      - run:
          name: Start services with Docker Compose
          command: |
            docker-compose up -d  # Start all services in the background
            sleep 5

      # # Start the client server in the background
      # - run:
      #     name: Start the client server
      #     command: |
      #       # npm run dev &
      #       # sleep 5

      # # Start the express server in the background
      # - run:
      #     name: Start server
      #     command: |
      #       cd server
      #       npm run dev &
      #       sleep 10        

      # Run the client tests
      - run:
          name: Run client tests
          command: npm test # Ensure your test script is defined in package.json        

      # Shut down Docker Compose after tests
      - run:
          name: Shutdown Docker Compose
          command: docker-compose down            

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  test-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - test